diff --git a/node_modules/solid-start-node/entry.js b/node_modules/solid-start-node/entry.js
index 4ec699d..8f69e85 100644
--- a/node_modules/solid-start-node/entry.js
+++ b/node_modules/solid-start-node/entry.js
@@ -1,8 +1,8 @@
 import { createServer } from "solid-start-node/server.js";
 import { createRequest } from "solid-start/runtime/fetch.js";
 import prepareManifest from "solid-start/runtime/prepareManifest.js";
-import manifest from "../../dist/rmanifest.json";
-import assetManifest from "../../dist/manifest.json";
+import manifest from "../../dist/rmanifest.json" assert { type: 'json' };
+import assetManifest from "../../dist/manifest.json" assert { type: 'json' };
 import { Readable } from "stream";
 import { once } from "events";
 import * as Streams from "stream/web";
@@ -21,8 +21,6 @@ const { PORT = 3000 } = process.env;
 
 const server = createServer({
   async render(req, res) {
-    if (req.url === "/favicon.ico") return;
-
     const webRes = await entry({
       request: createRequest(req),
       responseHeaders: new Headers(),
diff --git a/node_modules/solid-start-node/index.js b/node_modules/solid-start-node/index.js
index a0a72fe..cd80a00 100644
--- a/node_modules/solid-start-node/index.js
+++ b/node_modules/solid-start-node/index.js
@@ -1,16 +1,15 @@
 import { copyFileSync } from "fs";
 import { dirname, join, resolve } from "path";
 import { fileURLToPath, pathToFileURL } from "url";
-import { rollup } from "rollup";
 import vite from "vite";
-import json from "@rollup/plugin-json";
-import nodeResolve from "@rollup/plugin-node-resolve";
-import common from "@rollup/plugin-commonjs";
+import { spawn } from "child_process";
 
 export default function () {
   return {
     start(config) {
-      import(pathToFileURL(join(config.root, "dist", "index.js")));
+      const proc = spawn("node", ["--conditions=\"browser,node\"", "--es-module-specifier-resolution=node", "--experimental-modules", join(config.root, ".solid", "server", "index.js")]);
+      proc.stdout.pipe(process.stdout);
+      proc.stderr.pipe(process.stderr);
     },
     async build(config) {
       const __dirname = dirname(fileURLToPath(import.meta.url));
@@ -34,7 +33,7 @@ export default function () {
             input: resolve(join(config.root, "src", `entry-server`)),
             output: {
               format: "esm"
-            }
+            },
           }
         }
       });
@@ -43,23 +42,6 @@ export default function () {
         join(config.root, ".solid", "server", "app.js")
       );
       copyFileSync(join(__dirname, "entry.js"), join(config.root, ".solid", "server", "index.js"));
-      const bundle = await rollup({
-        input: join(config.root, ".solid", "server", "index.js"),
-        plugins: [
-          json(),
-          nodeResolve({
-            preferBuiltins: true,
-            exportConditions: ["node", "solid"]
-          }),
-          common()
-        ],
-        external: ["undici", "stream/web", "@prisma/client"]
-      });
-      // or write the bundle to disk
-      await bundle.write({ format: "esm", dir: join(config.root, "dist") });
-
-      // closes the bundle
-      await bundle.close();
     }
   };
 }
diff --git a/node_modules/solid-start-node/server.js b/node_modules/solid-start-node/server.js
index 260b13e..55922d9 100644
--- a/node_modules/solid-start-node/server.js
+++ b/node_modules/solid-start-node/server.js
@@ -8,7 +8,7 @@ import { fileURLToPath } from 'url';
 const __dirname = dirname(fileURLToPath(import.meta.url));
 const noop_handler = (_req, _res, next) => next();
 const paths = {
-	assets: join(__dirname, '/assets')
+	assets: join(__dirname, '../../dist')
 };
 
 export function createServer({ render }) {
@@ -20,7 +20,7 @@ export function createServer({ render }) {
 		  })
 		: noop_handler;
 
-	const server = polka().use("/assets",
+	const server = polka().use("/",
 		comp,
 		assets_handler
 	).use(comp, render);
